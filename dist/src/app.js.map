{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":";;;;;AAAA,4DAAqC;AACrC,gEAAyC;AACzC,8DAAwC;AACxC,oDAA8B;AAC9B,kDAA4B;AAC5B,8CAAwB;AACxB,iEAAgE;AAChE,uEAAsE;AACtE,6EAA4E;AAC5E,+EAA8E;AAC9E,qEAAoE;AACpE,wCAA4C;AAE5C;;;;GAIG;AACH;IAgBI;;;;;OAKG;IACH;QACI,+BAA+B;QAC/B,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAC;QAErB,wBAAwB;QACxB,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,aAAa;QACb,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IA7BD;;;;;;;OAOG;IACW,gBAAS,GAAvB;QACI,OAAO,IAAI,MAAM,EAAE,CAAC;IACxB,CAAC;IAqBM,mCAAkB,GAAzB;QACI,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACI,uBAAM,GAAb;QACI,mBAAmB;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE7D,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAEnC,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAE5B,yBAAyB;QACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEhC,4BAA4B;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC,CAAC;QAEJ,iCAAiC;QACjC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,uBAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAE/C,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAC,GAAQ,EAAE,GAAoB,EAAE,GAAqB,EAAE,IAA0B;YAC3F,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,iBAAiB;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAY,EAAE,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACK,uBAAM,GAAd;QACI,IAAI,MAAsB,CAAC;QAC3B,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;QAE1B,oCAAoC;QACpC,kBAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1B,+CAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,6CAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,uCAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClC,iCAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,qCAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACjC,wBAAwB;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEzB,CAAC;IAEL,aAAC;AAAD,CAAC,AAlGD,IAkGC;AAEQ,wBAAM","sourcesContent":["import bodyParser from \"body-parser\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport errorHandler from \"errorhandler\";\r\nimport express from \"express\";\r\nimport logger from \"morgan\";\r\nimport path from \"path\";\r\nimport { AdminController } from \"./controllers/adminController\";\r\nimport { CustomerController } from \"./controllers/customerController\";\r\nimport { LeaderboardController } from \"./controllers/leaderboardController\";\r\nimport { NotificationController } from \"./controllers/notificationController\";\r\nimport { ProductController } from \"./controllers/productController\";\r\nimport { IndexRoute } from \"./routes/index\";\r\n\r\n/**\r\n * The server.\r\n *\r\n * @class Server\r\n */\r\nexport default class Server {\r\n\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @class Server\r\n     * @method bootstrap\r\n     * @static\r\n     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.\r\n     */\r\n    public static bootstrap(): Server {\r\n        return new Server();\r\n    }\r\n\r\n    public app: express.Application;\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @class Server\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // create expressjs application\r\n        this.app = express();\r\n\r\n        // configure application\r\n        this.config();\r\n\r\n        // add routes\r\n        this.routes();\r\n    }\r\n\r\n    public getExpressInstance(): express.Application {\r\n        return this.app;\r\n    }\r\n\r\n    /**\r\n     * Configure application\r\n     *\r\n     * @class Server\r\n     * @method config\r\n     */\r\n    public config() {\r\n        // add static paths\r\n        this.app.use(express.static(path.join(__dirname, \"public\")));\r\n\r\n        // configure pug\r\n        this.app.set(\"views\", path.join(__dirname, \"../views\"));\r\n        this.app.set(\"view engine\", \"pug\");\r\n\r\n        // mount logger\r\n        this.app.use(logger(\"dev\"));\r\n\r\n        // mount json form parser\r\n        this.app.use(bodyParser.json());\r\n\r\n        // mount query string parser\r\n        this.app.use(bodyParser.urlencoded({\r\n            extended: true,\r\n        }));\r\n\r\n        // mount cookie parser middleware\r\n        this.app.use(cookieParser(\"SECRET_GOES_HERE\"));\r\n\r\n        // catch 404 and forward to error handler\r\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            err.status = 404;\r\n            next(err);\r\n        });\r\n\r\n        // error handling\r\n        this.app.use(errorHandler());\r\n    }\r\n\r\n    /**\r\n     * Create and return Router.\r\n     *\r\n     * @class Server\r\n     * @method routes\r\n     * @return void\r\n     */\r\n    private routes() {\r\n        let router: express.Router;\r\n        router = express.Router();\r\n\r\n        // Create routes for all controllers\r\n        IndexRoute.create(router);\r\n        NotificationController.create(router);\r\n        LeaderboardController.create(router);\r\n        CustomerController.create(router);\r\n        AdminController.create(router);\r\n        ProductController.create(router);\r\n        // use router middleware\r\n        this.app.use(router);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { Server };\r\n"]}