{"version":3,"file":"cron.js","sourceRoot":"","sources":["../../src/cron.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\nimport DbClient = require(\"./DbClient\");\nimport { ProductModel } from \"./models/productModel\";\n\nconst chai = require(\"chai\");\nconst request = require('request');\n\nconst cron = require(\"node-cron\");\nconst fs = require(\"fs\");\n\nconst datab = DbClient.connect();\nlet updateSuccess = false;\nlet integrityNew;\nlet integrityOld;\n\nfunction delay(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/*************\n * CRON JOBS *\n *************/\n\n/**\n * The purpose of this cron job is to update the database every minute (in an attempt to mock data)\n * If the mock is successful, the job appends a success log to the end of a local log file\n */\nconst shoeUpdate = new ProductModel();\ncron.schedule(\"* * * * *\", (err: any) => {\n    if (err) {\n        throw err;\n    }\n    const date = new Date();\n    const update = datab.then((db) => {\n        db!.collection(\"shoes\").updateMany({}, { $inc: { current_price: 1 } });\n        return true;\n    })\n    .catch((err) => {\n        console.log(\"Failed to update shoes\");\n        return false;\n    });\n\n    if (update) {\n        fs.appendFile(\"./logs/update.log\",\n            date.toLocaleString() + \" --- Updated all shoes by $2 successfully\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n        });\n        updateSuccess = true;\n    } else {\n        fs.appendFile(\"./logs/update.log\",\n            date.toLocaleString() + \" --- FATAL ERROR: FAILED TO UPDATE SHOES ***********\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n        });\n        updateSuccess = false;\n    }\n});\n\n/**\n * *** INTEGRITY QUALITY ATTRIBUTE AUTOMATIC TEST ***\n * \n * The purpose of this cron job is to automatically test our integrity quality attribute (issue #14)\n * The cron job open it's own connection to the database and grab the list of shoes. It will then\n * compare this list of shoes to the shoe list post update to verify an price change has occured.\n * From there it will use one of the apps routes that will run a similar query, and compare the results.\n * If there are any discrepencies the cron job will log it. This is done at the beginning of every hour.\n */\ncron.schedule(\"0 * * * *\", async (err: any) => {\n    if (err) {\n        throw err;\n    }\n    const date = new Date();\n\n    // Grab integral data to be compared\n    integrityOld = await datab.then((db) => {\n        return db!.collection(\"shoes\").find().toArray();\n        })\n        .catch((err) => {\n            console.log(\"Failed to grab shoe array\");\n            return false;\n        });\n\n    // Wait just over one minute. Enough time to data to update\n    await delay(63000);\n\n    // If the last update was successful continue, otherwise no need\n    if (updateSuccess) {\n        // Grab new data to be compared\n        integrityNew = await datab.then((db) => {\n            return db!.collection(\"shoes\").find().toArray();\n        })\n        .catch((err) => {\n            console.log(\"Failed to grab shoe array\");\n            return false;\n        });\n    } else {\n        fs.appendFile(\"./logs/integrity.log\",\n            date.toLocaleString() + \" --- FATAL ERROR: LAST UPDATE FAILED\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n            });\n        return;\n    }\n\n    // Verify that the update occured\n    try {\n        chai.expect(integrityNew).to.not.deep.equal(integrityOld);\n    } catch {\n        fs.appendFile(\"./logs/integrity.log\",\n            date.toLocaleString() +\n            \" --- FATAL ERROR: OLD DATA == NEW DATA. SOMETHING WEIRD HAPPENED\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n            });\n    }\n\n    const shoes = new ProductModel();\n    const allShoes = await shoes.getAllDB();\n\n    // Verify that the shoe list is the same\n    try {\n        chai.expect(allShoes).to.deep.equal(integrityNew);\n    } catch {\n        fs.appendFile(\"./logs/integrity.log\",\n            date.toLocaleString() + \" --- FATAL ERROR: NEW DATA NOT REFLECTED ON APP\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n            });\n    }\n});\n\n\n/**\n * *** AVAILABILITY QUALITY ATTRIBUTE AUTOMATIC TEST ***\n * \n * The purpose of this cron job is to send a request to the live application every hour.\n * This is to check if the app is live (i.e. available). If the app is live, make a log of it\n * otherwise, log an error and shuts down the node process (process exit code 1). 0,15,30,45\n */\ncron.schedule(\"* * * * *\", () => {\n    const date = new Date();\n    request('https://seng350.roubekas.com', async (error: any, response: any, body: any) => {\n        if (response.statusCode === 200) {\n            console.log(\"Alive\");\n            fs.appendFile(\"./logs/availability.log\",\n                date.toLocaleString() + \" --- Heartbeat confirmed, server is alive and well\\n\", (err: any) => {\n                    if (err) {\n                        throw err;\n                    }\n                });\n        } else {\n            console.log(\"Dead\");\n            fs.appendFile(\"./logs/availability.log\",\n                date.toLocaleString() + \" --- FATAL ERROR: Heartbeat dead, shutting down\\n\", (err: any) => {\n                    if (err) {\n                        throw err;\n                    }\n                });\n            await delay(10000);\n            return process.exit(1);\n        }\n    })\n});\n\n/**\n * The pusepose of this cron jobs is to renew the log files at the end of every Sunday and Thursday\n * This is done with the goal of not having 20gb log files that crash the server\n */\ncron.schedule(\"59 23 * * 3,7\", () => {\n    fs.unlink(\"./logs/update.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.link(\"./logs/update.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.unlink(\"./logs/integrity.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.link(\"./logs/integrity.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.unlink(\"./logs/availability.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.link(\"./logs/availability.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    console.log(\"All log files successfully re-created!\");\n});\n"]}