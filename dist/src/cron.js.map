{"version":3,"file":"cron.js","sourceRoot":"","sources":["../../src/cron.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAe;AACf,qCAAwC;AACxC,sDAAqD;AAGrD,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE3B,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAEzB,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAA;AAChC,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAI,aAAa,GAAG,KAAK,CAAC;AAC1B,IAAI,aAAa,CAAC;AAClB,IAAI,aAAa,CAAC;AAElB,SAAS,KAAK,CAAC,EAAU;IACrB,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,EAAvB,CAAuB,CAAC,CAAC;AAC3D,CAAC;AAED;;eAEe;AAEf;;;GAGG;AACH,IAAM,UAAU,GAAG,IAAI,2BAAY,EAAE,CAAC;AACtC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAC,GAAQ;IAChC,IAAI,GAAG,EAAE;QACL,MAAM,GAAG,CAAC;KACb;IACD,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE;QACxB,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;SACD,KAAK,CAAC,UAAC,GAAG;QACP,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,IAAI,MAAM,EAAE;QACR,EAAE,CAAC,UAAU,CAAC,mBAAmB,EAC7B,IAAI,CAAC,cAAc,EAAE,GAAG,6CAA6C,EAAE,UAAC,GAAQ;YAC5E,IAAI,GAAG,EAAE;gBACL,MAAM,GAAG,CAAC;aACb;QACT,CAAC,CAAC,CAAC;QACH,aAAa,GAAG,IAAI,CAAC;KACxB;SAAM;QACH,EAAE,CAAC,UAAU,CAAC,mBAAmB,EAC7B,IAAI,CAAC,cAAc,EAAE,GAAG,wDAAwD,EAAE,UAAC,GAAQ;YACvF,IAAI,GAAG,EAAE;gBACL,MAAM,GAAG,CAAC;aACb;QACT,CAAC,CAAC,CAAC;QACH,aAAa,GAAG,KAAK,CAAA;KACxB;AACL,CAAC,CAAC,CAAC;AAGH;;;;;;GAMG;AACH,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAO,GAAQ;;;;;gBACtC,IAAI,GAAG,EAAE;oBACL,MAAM,GAAG,CAAC;iBACb;gBAGe,qBAAM,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE;wBAC/B,OAAO,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;oBAChD,CAAC,CAAC;yBACD,KAAK,CAAC,UAAC,GAAG;wBACP,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;wBACzC,OAAO,KAAK,CAAC;oBACjB,CAAC,CAAC,EAAA;;gBAPN,oCAAoC;gBACpC,aAAa,GAAG,SAMV,CAAC;gBAEP,2DAA2D;gBAC3D,qBAAM,KAAK,CAAC,KAAK,CAAC,EAAA;;gBADlB,2DAA2D;gBAC3D,SAAkB,CAAC;qBAGhB,aAAa,EAAb,wBAAa;gBAEI,qBAAM,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE;wBAC/B,OAAO,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;oBACpD,CAAC,CAAC;yBACD,KAAK,CAAC,UAAC,GAAG;wBACP,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;wBACzC,OAAO,KAAK,CAAC;oBACjB,CAAC,CAAC,EAAA;;gBAPF,+BAA+B;gBAC/B,aAAa,GAAG,SAMd,CAAC;;;gBAEH,EAAE,CAAC,UAAU,CAAC,sBAAsB,EAChC,IAAI,CAAC,cAAc,EAAE,GAAG,wCAAwC,EAAE,UAAC,GAAQ;oBACvE,IAAI,GAAG,EAAE;wBACL,MAAM,GAAG,CAAC;qBACb;gBACL,CAAC,CAAC,CAAC;gBACP,sBAAO;;gBAGX,iCAAiC;gBACjC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;gBAWrD,KAAK,GAAG,IAAI,2BAAY,EAAE,CAAC;gBAChB,qBAAM,KAAK,CAAC,QAAQ,EAAE,EAAA;;gBAAjC,QAAQ,GAAG,SAAsB;gBAEvC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;gBACrB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;gBAC1B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;gBAC1B,wCAAwC;gBACxC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;gBAC9C,uBAAuB;gBACvB,4CAA4C;gBAC5C,uGAAuG;gBACvG,yBAAyB;gBACzB,6BAA6B;gBAC7B,gBAAgB;gBAChB,cAAc;gBACd,cAAc;gBACd,MAAM;gBAEV,EAAE,CAAC,UAAU,CAAC,sBAAsB,EAChC,IAAI,CAAC,cAAc,EAAE,GAAG,oCAAoC,EAAE,UAAC,GAAQ;oBACnE,IAAI,GAAG,EAAE;wBACL,MAAM,GAAG,CAAC;qBACb;gBACL,CAAC,CAAC,CAAC;gBAEP,uBAAuB;gBACvB,aAAa,GAAG,aAAa,CAAC;;;;KACjC,CAAC,CAAC;AAEH;;;GAGG;AACH,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;IACzB,EAAE,CAAC,MAAM,CAAC,mBAAmB,EAAE,UAAC,GAAQ;QACpC,IAAI,GAAG,EAAE;YACL,MAAM,GAAG,CAAC;SACb;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAC,GAAQ;QAClC,IAAI,GAAG,EAAE;YACL,MAAM,GAAG,CAAC;SACb;QACD,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,MAAM,CAAC,sBAAsB,EAAE,UAAC,GAAQ;QACvC,IAAI,GAAG,EAAE;YACL,MAAM,GAAG,CAAC;SACb;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,UAAC,GAAQ;QACrC,IAAI,GAAG,EAAE;YACL,MAAM,GAAG,CAAC;SACb;QACD,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import \"mocha\";\nimport DbClient = require(\"./DbClient\");\nimport { ProductModel } from \"./models/productModel\";\nimport { exists } from \"fs\";\n\nlet chai = require(\"chai\");\n\nconst cron = require(\"node-cron\");\nconst fs = require(\"fs\");\n\nconst datab = DbClient.connect()\nconst date = new Date();\nvar updateSuccess = false;\nvar integrity_new;\nvar integrity_old;\n\nfunction delay(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/*************\n * CRON JOBS *\n *************/\n\n/**\n * The purpose of this cron job is to update the database every minute (in an attempt to mock data)\n * If the mock is successful, the job appends a success log to the end of a local log file\n */\nconst shoeUpdate = new ProductModel();\ncron.schedule(\"* * * * *\", (err: any) => {\n    if (err) {\n        throw err;\n    }\n    const update = datab.then(db => {\n        db!.collection(\"shoes\").updateMany({}, { $inc: { current_price: 2 } });\n        return true;\n    })\n    .catch((err) => {\n        console.log(\"Failed to update shoes\");\n        return false;\n    });\n\n    if (update) {\n        fs.appendFile(\"./logs/update.log\",\n            date.toLocaleString() + \" --- Updated all shoes by $2 successfully\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n        });\n        updateSuccess = true;\n    } else {\n        fs.appendFile(\"./logs/update.log\",\n            date.toLocaleString() + \" --- FATAL ERROR: FAILED TO UPDATE SHOES ***********\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n        });\n        updateSuccess = false\n    }\n});\n\n\n/**\n * The purpose of this log file is to automatically test our integrity quality attribute (issue #14)\n * The cron job will open it's own connection to the database and grab the list of shoes. It will then \n * compare this list of shoes to the previous hours list to verify a change has been made. From there it\n * will use one of the apps routes that will run a similar query, and compare the results. If there are any\n * discrepencies the cron job will log it. This is done at the beginning of every hour.\n */\ncron.schedule(\"* * * * *\", async (err: any) => {\n    if (err) {\n        throw err;\n    }\n\n    // Grab integral data to be compared\n    integrity_old = await datab.then(db => {\n        return db!.collection(\"shoes\").find().toArray();\n        })\n        .catch((err) => {\n            console.log(\"Failed to grab shoe array\");\n            return false;\n        });\n\n    // Wait just over one minute. Enough time to data to update\n    await delay(63000);\n\n    // If the last update was successful continue, otherwise no need\n    if(updateSuccess) {\n        // Grab new data to be compared\n        integrity_new = await datab.then(db => {\n            return db!.collection(\"shoes\").find().toArray();\n        })\n        .catch((err) => {\n            console.log(\"Failed to grab shoe array\");\n            return false;\n        });\n    } else {\n        fs.appendFile(\"./logs/integrity.log\",\n            date.toLocaleString() + \" --- FATAL ERROR: LAST UPDATE FAILED\\n\", (err: any) => {\n                if (err) {\n                    throw err;\n                }\n            });\n        return;\n    }\n    \n    // Verify that the update occured\n    chai.expect(integrity_new).to.not.deep.equal(integrity_old)\n        // .catch((e: any) => {\n        //     fs.appendFile(\"./logs/integrity.log\",\n        //         date.toLocaleString() + \" --- FATAL ERROR: OLD DATA == NEW DATA. SOMETHING WEIRD HAPPENED\\n\", (err: any) => {\n        //             if (err) {\n        //                 throw err;\n        //             }\n        //         });\n        //     throw e\n        // });\n\n    const shoes = new ProductModel();\n    const allShoes = await shoes.getAllDB();\n\n    console.log(allShoes)\n    console.log(\"***********\")\n    console.log(integrity_new)\n    // Verify that the shoe list is the same\n    chai.expect(allShoes).to.deep.equal(integrity_new)\n        // .catch((e: any) => {\n        //     fs.appendFile(\"./logs/integrity.log\",\n        //         date.toLocaleString() + \" --- FATAL ERROR: NEW DATA NOT REFLECTED ON APP\\n\", (err: any) => {\n        //             if (err) {\n        //                 throw err;\n        //             }\n        //         });\n        //     throw e\n        // });\n\n    fs.appendFile(\"./logs/integrity.log\",\n        date.toLocaleString() + \" --- Data integrity test passed.\\n\", (err: any) => {\n            if (err) {\n                throw err;\n            }\n        });\n\n    // Update integrity_old\n    integrity_old = integrity_new;\n});\n\n/**\n * The pusepose of this cron jobs is to renew the log files at the end of every Sunday\n * This is done with the goal of not having 20gb log files that crash the server\n */\ncron.schedule(\"59 23 * * 0\", () => {\n    fs.unlink(\"./logs/update.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.link(\"./logs/update.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n        console.log(\"Integrity file successfully re-created!\");\n    });\n    fs.unlink(\"./logs/integrity.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n    });\n    fs.link(\"./logs/integrity.log\", (err: any) => {\n        if (err) {\n            throw err;\n        }\n        console.log(\"Integrity file successfully re-created!\");\n    });\n\n});\n"]}