{"version":3,"file":"shoe_model.js","sourceRoot":"","sources":["../../../src/models/shoe_model.ts"],"names":[],"mappings":"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","sourcesContent":["import DbClient = require(\"../DbClient\");\r\n\r\nexport class ShoeModel {\r\n\r\n    constructor() {}\r\n    /*\r\n        input type: key value arr, example :  [{\"1\":300}, {\"3\":400},{\"5\":500}]\r\n        returns an array of shoe objects ex: [ {shoe_1 ...}, {shoe_2 ...}, {shoe_3}...]\r\n     */\r\n    public getAllShoes(shoeKeysVal: any) {\r\n\r\n        const keyArr: any[] = [];\r\n\r\n        // get the keys from the input, keys_arr should be equal to [1,3,5] from the example above\r\n\r\n        let prop;\r\n        for (prop of shoeKeysVal) {\r\n            keyArr.push(JSON.parse(JSON.stringify(prop)).shoe_id);\r\n        }\r\n\r\n        // an array of objects holding indvidual json objects for each of the shoes the user has\r\n        const jsonShoeArr: any[] = [];\r\n\r\n        const shoes = DbClient.connect()\r\n            .then((db) => {\r\n                // will return all the shoes in db\r\n                return db!.collection(\"shoes\").find().toArray();\r\n            })\r\n            .then((sneakers: any) => {\r\n                // loop over all the shoes in db and push into jsonShoeArr only those that are\r\n                // owned by user\r\n                let shoe;\r\n                let id;\r\n                for (shoe of sneakers ) {\r\n                    for (id of keyArr) {\r\n                        // if current shoe is also a shoe owned by user, id is type string so we typecast to number\r\n                        if (shoe.shoe_id === Number(id)) {\r\n                            jsonShoeArr.push(shoe);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return jsonShoeArr;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"err.message\");\r\n            });\r\n\r\n        return shoes;\r\n    }\r\n\r\n    /*\r\n     Input type: integer that refers to the shoe_id. ex: 3\r\n     Output type: a json shoe obejct ex: {shoe_id:3 ... }\r\n     */\r\n\r\n    public getOneShoe(shoeID: any) {\r\n\r\n        console.log(shoeID);\r\n        // an array of objects holding indvidual json objects for each of the shoes the user has\r\n        const jsonShoeArr: any[] = [];\r\n\r\n        const shoes = DbClient.connect()\r\n            .then((db) => {\r\n\r\n                // will return all the shoes in db\r\n                return db!.collection(\"shoes\").find().toArray();\r\n\r\n            })\r\n\r\n            .then((sneakers: any) => {\r\n\r\n                // loop over all the shoes in db and push into jsonShoeArr only the shoe that has id\r\n                // shoeID\r\n                let shoe;\r\n                for ( shoe of sneakers ) {\r\n                    // if current shoe is also a shoe whose id is shoeID, shoeID is type string so we typecast to number\r\n                    if (shoe.shoe_id === Number(shoeID)) {\r\n                        jsonShoeArr.push(shoe);\r\n                        break;\r\n                    }\r\n                }\r\n                return jsonShoeArr[0];\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"err.message\");\r\n            });\r\n\r\n        return shoes;\r\n    }\r\n\r\n    public get_all() {\r\n        const shoes = DbClient.connect()\r\n            .then((db) => {\r\n                return db!.collection(\"shoes\").find().toArray();\r\n            })\r\n            .then((sneakers: any) => {\r\n                return sneakers;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"err.message\");\r\n            });\r\n\r\n        return shoes;\r\n    }\r\n}\r\n"]}