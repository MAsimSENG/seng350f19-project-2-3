{"version":3,"file":"shoe_model.js","sourceRoot":"","sources":["../../../src/models/shoe_model.ts"],"names":[],"mappings":";;AAAA,sCAAyC;AAEzC;IAEI;IAAc,CAAC;IACnB;;;OAGG;IACQ,kCAAa,GAApB,UAAqB,YAAgB;QAEjC,IAAI,OAAO,GAAQ,EAAE,CAAC;QAEtB,0FAA0F;QAE1F,IAAI,IAAI,CAAC;QACT,KAAc,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,EAAC;YAArB,IAAI,qBAAA;YACN,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SACrC;QACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,wFAAwF;QACxF,IAAI,aAAa,GAAS,EAAE,CAAA;QAE5B,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE;aAC3B,IAAI,CAAC,UAAC,EAAE;YAEL,kCAAkC;YAClC,OAAO,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAEpD,CAAC,CAAC;aAED,IAAI,CAAC,UAAC,QAAY;YAEf,gFAAgF;YAChF,gBAAgB;YAChB,IAAI,IAAI,CAAC;YACT,IAAI,EAAE,CAAC;YACP,KAAc,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAG;gBAAnB,IAAI,iBAAA;gBACN,KAAY,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;oBAAf,EAAE,gBAAA;oBACJ,2FAA2F;oBAE3F,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,EAAE,CAAC,EAAC;wBAC5B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACzB,MAAM;qBACT;iBACJ;aACJ;YAED,OAAO,aAAa,CAAC;QACzB,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,GAAG;YACP,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAA;QAEN,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;OAGG;IAEI,iCAAY,GAAnB,UAAoB,MAAU;QAG1B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpB,wFAAwF;QACxF,IAAI,aAAa,GAAS,EAAE,CAAA;QAE5B,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE;aAC3B,IAAI,CAAC,UAAC,EAAE;YAEL,kCAAkC;YAClC,OAAO,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAEpD,CAAC,CAAC;aAED,IAAI,CAAC,UAAC,QAAY;YAEf,sFAAsF;YACtF,SAAS;YACT,IAAI,IAAI,CAAC;YACT,KAAc,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAG;gBAAnB,IAAI,iBAAA;gBACF,oGAAoG;gBACpG,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,MAAM,CAAC,EAAC;oBAChC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACzB,MAAM;iBACT;aACR;YACD,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,GAAG;YACP,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAA;QAEN,OAAO,KAAK,CAAC;IACjB,CAAC;IAEL,iBAAC;AAAD,CAAC,AAlGD,IAkGC","sourcesContent":["import DbClient = require(\"../DbClient\");\n\nexport default class shoe_model {\n\n    constructor(){}\n/*\n    input type: key value arr, example :  [{\"1\":300}, {\"3\":400},{\"5\":500}]\n    returns an array of shoe objects ex: [ {shoe_1 ...}, {shoe_2 ...}, {shoe_3}...]\n */\n    public get_all_shoes(shoeKeys_val:any) {\n\n        let key_arr:any[] =[];\n\n        // get the keys from the input, keys_arr should be equal to [1,3,5] from the example above\n\n        let prop;\n        for ( prop of shoeKeys_val){\n            key_arr.push(Object.keys(prop)[0])\n        }\n        console.log(key_arr);\n\n        // an array of objects holding indvidual json objects for each of the shoes the user has\n        let json_shoe_Arr:any[] = []\n\n        const shoes = DbClient.connect()\n            .then((db) => {\n\n                // will return all the shoes in db\n                return db!.collection(\"shoes\").find().toArray();\n\n            })\n\n            .then((sneakers:any) => {\n\n                // loop over all the shoes in db and push into json_shoe_Arr only those that are\n                // owned by user\n                let shoe;\n                let id;\n                for ( shoe of sneakers ) {\n                    for(  id of key_arr) {\n                        // if current shoe is also a shoe owned by user, id is type string so we typecast to number\n\n                        if (shoe.shoe_id === Number(id)){\n                            json_shoe_Arr.push(shoe);\n                            break;\n                        }\n                    }\n                }\n\n                return json_shoe_Arr;\n            })\n            .catch((err) => {\n                console.log(\"err.message\");\n            })\n\n        return shoes;\n    }\n\n    /*\n     Input type: integer that refers to the shoe_id. ex: 3\n     Output type: a json shoe obejct ex: {shoe_id:3 ... }\n     */\n\n    public get_one_shoe(shoeID:any) {\n\n\n        console.log(shoeID);\n\n        // an array of objects holding indvidual json objects for each of the shoes the user has\n        let json_shoe_Arr:any[] = []\n\n        const shoes = DbClient.connect()\n            .then((db) => {\n\n                // will return all the shoes in db\n                return db!.collection(\"shoes\").find().toArray();\n\n            })\n\n            .then((sneakers:any) => {\n\n                // loop over all the shoes in db and push into json_shoe_Arr only the shoe that has id\n                // shoeID\n                let shoe;\n                for ( shoe of sneakers ) {\n                        // if current shoe is also a shoe whose id is shoeID, shoeID is type string so we typecast to number\n                        if (shoe.shoe_id === Number(shoeID)){\n                            json_shoe_Arr.push(shoe);\n                            break;\n                        }\n                }\n                return json_shoe_Arr[0];\n            })\n            .catch((err) => {\n                console.log(\"err.message\");\n            })\n\n        return shoes;\n    }\n\n}"]}